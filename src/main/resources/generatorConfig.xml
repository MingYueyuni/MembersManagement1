<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>

    <!--导入属性配置-->
    <properties resource="generator.properties"></properties>
    <!--指定特定数据库的jdbc驱动jar包的位置-->
    <classPathEntry location="${jdbc.driverLocation}"/>


    <!--defaultModelType="flat" 是一个数据表生成一个实体类-->
    <context id="testTables" targetRuntime="MyBatis3" defaultModelType="flat">
        <property name="javaFileEncoding" value="UTF-8"/>

        <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/>
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>
        <!-- 生成一个新的selectByExample方法，这个方法可以接收offset和limit参数，主要用来实现分页 -->
        <plugin type="org.mybatis.generator.plugins.RowBoundsPlugin"></plugin>


        <!-- 生成的代码去掉注释 -->
        <commentGenerator>
            <property name="suppressAllComments" value="true"/>
            <property name="suppressDate" value="true"/>
        </commentGenerator>

        <!-- 数据库连接 -->
        <jdbcConnection driverClass="${jdbc.driverClass}" connectionURL="${jdbc.connectionURL}"
                        userId="${jdbc.userId}" password="${jdbc.password}"/>

        <!-- 类型处理器，在数据库类型和java类型之间的转换控制-->
        <javaTypeResolver>
            <!--将 JDBC DECIMAL和NUMERIC解析为Integer，而不是BigDecimal-->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- model生成 -->
        <javaModelGenerator targetPackage="com.example.pojo" targetProject="${targetProject}">
            <property name="enableSubPackages" value="false"/>
            <property name="trimStrings" value="true"/>
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="true"/>
            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>
        </javaModelGenerator>

        <!-- MapperXML生成 -->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!-- Mapper接口生成 -->
        <javaClientGenerator type="XMLMAPPER"  targetPackage="com.example.mapper" targetProject="${targetProject}"
                               >
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>

        <!-- 需要映射的表 -->
        <table schema="${jdbc.connectionURL}" tableName="members" domainObjectName="members"
               enableCountByExample="false" enableDeleteByExample="false"
               enableSelectByExample="false" enableUpdateByExample="false">
            <!--生成实体类时是否使用实际的列名作为实体类的属性名,默认值为false,数据库中的字段名转换为Camel Case风格-->
            <property name="useActualColumnNames" value="true" />
            <generatedKey column="id" sqlStatement="jdbc" identity="true"></generatedKey>
        </table>
        <table schema="${jdbc.connectionURL}" tableName="goods" domainObjectName="goods"
               enableCountByExample="false" enableDeleteByExample="false"
               enableSelectByExample="false" enableUpdateByExample="false">
            <!--生成实体类时是否使用实际的列名作为实体类的属性名,默认值为false,数据库中的字段名转换为Camel Case风格-->
            <property name="useActualColumnNames" value="true" />
            <generatedKey column="id" sqlStatement="jdbc" identity="true"></generatedKey>
        </table>
        <!-- 是否生成和使用xxxExample类在查询中替代模型类 -->
        <!--  <table tableName="t_user" domainObjectName="User" enableCountByExample="false" enableDeleteByExample="true"
                 enableSelectByExample="false" enableUpdateByExample="false"  >
          </table>-->


    </context>
</generatorConfiguration>